#+TITLE: Deploying the application on a server
#+AUTHOR: VLEAD
#+DATE: [2017-07-07 Mon]
#+SETUPFILE: ../org-templates/level-1.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* Introduction
  This document will illustrate installation of all the dependencies required
  for setting up the application.


* Auto Deployment steps using Apache2 server
** Install dependendent python packages
  Here we use the =setuptools= module from the standard lib, to make a
  =setup.py= file, which will install all the python library dependencies.

#+BEGIN_SRC python
from setuptools import setup

requires = [
    'flask',
    'flask-cors',
    'flask-testing',
    'requests',
    'pyyaml',
    'GitPython'
]

setup(
    name='ci-service',
    version='1.0',
    install_requires=requires
)

#+END_SRC

** Configuring the application and its deployment
  The following program configures the application, configures the web server
  to use WSGI and use the application scripts, and finally calls the database
  setup scripts to actually setup the database with tables.

#+BEGIN_SRC sh
#!/bin/bash
# Configure the application in the deployment environment
# 1. Update the config.py file with appropriate values
# 2. Update the apache config to server via WSGI
# 3. Run the database setup scripts to setup the database

if [[ `id -u` -ne 0 ]]; then
  echo "You have to execute this script as super user!"
  exit 1;
fi

ABS_PATH_DS=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )

update_apache_config() {
  WSGI_SCRIPT="ci-service.wsgi"
  APACHE_VHOST_FILE="/etc/apache2/sites-available/000-default.conf"

  sed -i "/<\/VirtualHost>/i \
    WSGIScriptAlias / $ABS_PATH_DS/$WSGI_SCRIPT
  " $APACHE_VHOST_FILE

}

update_apache_config
if [[ $? -ne 0 ]]; then
  echo "FATAL: Failed to update apache config"
  exit 1;
fi

service apache2 restart
exit 0;
#+END_SRC

** Install all dependencies and setup the software
   Install all dependencies, including the OS related packages, Python packages,
  setup the database, configure the webserver, and finally deploy the
  application.

#+BEGIN_SRC sh
#!/bin/bash
# Shell script to install deb package dependencies as well as python package
# dependencies for dataservice.

# if any proxy server
#PROXY=""
# Update the packages
echo "Updating package cache.."
apt-get -y update
if [[ $? -ne 0 ]]; then
  echo "Updating package cache failed!"
  exit 1;
fi

# apache, mod_wsgi etc.
echo "Installing pre-requisite dependencies.."
apt-get install -y python-dev libmysqld-dev python-setuptools apache2 libapache2-mod-wsgi libffi-dev
if [[ $? -ne 0 ]]; then
  echo "FATAL: Installing pre-requisite dependencies failed!"
  exit 1;
fi

echo "Enabling the mod WSGI on apache"
a2enmod wsgi
if [[ $? -ne 0 ]]; then
  echo "FATAL: Unable to enable mod wsgi!"
  exit 1;
fi

# Installing python dependencies
echo "Installing dependencies.."
#export http_proxy=$PROXY
#export https_proxy=$PROXY
#python setup.py install
pip install Flask Flask-SQLAlchemy requests flask-cors flask-testing pyyaml

if [[ $? -ne 0 ]]; then
  echo "FATAL: Installation failed!"
  exit 1;
fi

exit 0

#+END_SRC

** Deploying the application

#+BEGIN_SRC python

import sys, os
BASE_DIR = BASE_DIR = os.path.join(os.path.dirname(os.path.abspath(__file__)))

#sys.path.insert(0, BASE_DIR)
sys.path.insert(0, "/var/www")
from runtime.rest.app import create_app
from runtime.config import flask_app_config as config

application = create_app(config)

#+END_SRC

** Tangle 							:boilerplate:
#+BEGIN_SRC python
print "deployment package"
#+END_SRC


* Auto Deployment steps using nginx server
** setup.py 
   Here we use the =setuptools= module from the standard lib, to make a
   =setup.py= file, which will install all the python library dependencies.

#+BEGIN_SRC python :tangle setup.py :eval no
from setuptools import setup

requires = [
    'flask',
    'flask-cors',
    'flask-testing',
    'requests',
    'pyyaml',
    'GitPython',
    'gunicorn'
]

setup(
    name='ci-service',
    version='1.0',
    install_requires=requires
)

#+END_SRC
** wsgi configuration

#+BEGIN_SRC python :tangle wsgi.py :eval no

import sys, os

sys.path.insert(0, "/usr/share/nginx/html/")
from runtime.rest.app import create_app
from runtime.config import flask_app_config as config

application = create_app(config)

#+END_SRC

** make CI as service

#+BEGIN_SRC python :tangle ci-service.conf :eval no

description "Gunicorn application server running ci-service"

start on runlevel [2345]
stop on runlevel [!2345]

respawn
setuid root
setgid www-data

chdir /usr/share/nginx/html/deployment
exec gunicorn --workers 3 --bind unix:ci-service.sock -m 007 wsgi

#+END_SRC

** nginx socket configuration

#+BEGIN_SRC python :tangle ci-service :eval no

server {
    listen 80;
    server_name localhost;

    location / {
        include proxy_params;
        proxy_pass http://unix:/usr/share/nginx/html/deployment/ci-service.sock;
    }
}

#+END_SRC

** tangle 							:boilerplate:
#+BEGIN_SRC python :eval no :tangle __init__.py
print "deployment package"
#+END_SRC


* Manual deployment using nginx server
** Install dependencies
   First, refresh your apt package index and then install the Python
   development libraries and headers, the pip Python package manager, and
   the Nginx web server and reverse proxy
#+BEGIN_EXAMPLE
sudo su -
apt-get update
apt-get install python-dev python-pip nginx
#+END_EXAMPLE
** Create Virtual environement
   Once the package installation is complete, you will have access to
   the pip Python package manager. We can use this to install the
   virtualenv package, which we will use to isolate our application's
   Python environment from any others that may exist on the system
#+BEGIN_EXAMPLE
pip install virtualenv
git clone https://github.com/vlead/continuous-integration
cd continuous-integration
git checkout develop
make
rsync -avz --progress build/code/ /var/www/ci-service
cd /var/www/ci-service
virtualenv venv
source venv/bin/activate
 
#+END_EXAMPLE
** Install wsgi and flask
#+BEGIN_EXAMPLE
pip install uwsgi flask requests pyyml flask_cors
#+END_EXAMPLE
** Create a WSGI Application =emacs /var/www/ci-service/wsgi.py=
   
#+BEGIN_EXAMPLE
import sys
sys.path.insert(0, "/var/www/ci-service")

from runtime.rest.app import create_app
from runtime.config import flask_app_config as config

application = create_app(config)

#+END_EXAMPLE
** Configure a uWSGI Config File =emacs /var/www/ci-service/ci.ini=
#+BEGIN_EXAMPLE
[uwsgi]
module = wsgi:application

master = true
processes = 5

socket = ci.sock
chmod-socket = 664
vacuum = true

die-on-term = true
#+END_EXAMPLE
** Create an Upstart File to Manage the App =emacs /etc/init/ci-service.conf=
#+BEGIN_EXAMPLE
description "uWSGI instance to serve ci-service"

start on runlevel [2345]
stop on runlevel [!2345]

setuid root
setgid www-data

script
    cd /var/www/ci-service
    . venv/bin/activate
    uwsgi --ini ci.ini
end script
#+END_EXAMPLE
 - Now, we can start the service by typing:
#+BEGIN_EXAMPLE
sudo start ci-service
#+END_EXAMPLE

** Configure Nginx to Proxy to uWSGI =emacs /etc/nginx/sites-available/ci-service=
#+BEGIN_EXAMPLE
server {
    listen 80;
    server_name localhost;

    location / {
        include         uwsgi_params;
        uwsgi_pass      unix:/var/www/ci-service/ci.sock;
    }
}

#+END_EXAMPLE
- Enable the server configuration we just made by linking it to the sites-enabled directory:
#+BEGIN_EXAMPLE
ln -s /etc/nginx/sites-available/ci-service /etc/nginx/sites-enabled
#+END_EXAMPLE
 - Check the configuration file for syntax errors:
#+BEGIN_EXAMPLE
service nginx configtest
#+END_EXAMPLE
 - Restart nginx server
#+BEGIN_EXAMPLE
service nginx restart
#+END_EXAMPLE
 - Access the application
#+BEGIN_EXAMPLE
http://localhost
#+END_EXAMPLE
