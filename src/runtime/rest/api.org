#+TITLE: The REST API
#+AUTHOR: VLEAD
#+DATE: [2016-07-26 Tue]
#+SETUPFILE: ../../org-templates/level-2.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* Introduction 
  This document illustrates building of the REST APIs which provide various functionality provided by a Continuous
  Integration Microservice.


* REST  
  
** Execute Git Commands
*** get_git_clone_loc
**** implemenation

#+NAME: git_clone_loc    
#+BEGIN_SRC python
class GitCommands:

    git_clone_loc = None

    def __init__(self):
        self.git_clone_loc = GIT_CLONE_LOC
        current_app.logger.debug("GIT_CLONE_LOC = %s" % str(self.git_clone_loc))

    def get_git_clone_loc(self):
        return self.git_clone_loc

#+END_SRC
**** test cases

#+NAME: test_git_clone_loc
#+BEGIN_SRC python

class TestGetGitLoc(unittest.TestCase):

    def create_app(self):
        app = create_app(config)
        with app.app_context():
            self.git = GitCommands()
        return app

    def setUp(self):
        self.git_url = "https://github.com/vlead/lab-data-service"

    def tearDown(self):
        pass

    def test_get_git_loc(self):
        print "test_get_git_loc"
        app = self.create_app()
        with app.app_context():
            git = GitCommands()
            clone_loc = git.get_git_clone_loc()
            self.assertEqual(clone_loc, GIT_CLONE_LOC)

#+END_SRC

*** construct repo
**** implemenation
#+NAME: construct_repo 
#+BEGIN_SRC python

    def construct_repo_name(self, lab_src_url):
        # sample lab_src_url: git@github.com:vlead/ovpl.git
        current_app.logger.debug("lab_src_url: %s" % lab_src_url)
        repo = lab_src_url.split('/')[-1]
        repo_name = (repo[:-4] if repo[-4:] == ".git" else repo)
        current_app.logger.debug("repo_name: %s" % repo_name)
        return str(repo_name)
#+END_SRC
**** test cases

#+NAME: test_construct_repo
#+BEGIN_SRC python

class TestConstructRepo(unittest.TestCase):

    def create_app(self):
        app = create_app(config)
        with app.app_context():
            self.git = GitCommands()
        return app

    def setUp(self):
        self.git_url = "https://github.com/vlead/lab-data-service"

    def tearDown(self):
        pass

    def test_construct_repo(self):
        print "test_construct_repo"
        app = self.create_app()
        with app.app_context():
            git = GitCommands()
            repo_name = git.construct_repo_name(self.git_url)
            repo_name1 = self.git_url.split("/")[-1]
            self.assertEqual(repo_name, repo_name1)

#+END_SRC

*** construct org
**** implementation
#+NAME: construct_org 
#+BEGIN_SRC python

    def construct_org_name(self, lab_src_url):
        # sample lab_src_url: git@github.com:vlead/ovpl.git
        current_app.logger.debug("lab_src_url: %s" % lab_src_url)
        org_name = lab_src_url.split('/')[-2]
        current_app.logger.debug("org_name: %s" % org_name)
        return str(org_name)
#+END_SRC
**** test cases

#+NAME: test_construct_org
#+BEGIN_SRC python

class TestConstructOrg(unittest.TestCase):

    def create_app(self):
        app = create_app(config)
        with app.app_context():
            self.git = GitCommands()
        return app

    def setUp(self):
        self.git_url = "https://github.com/vlead/lab-data-service"

    def tearDown(self):
        pass

    def test_construct_org(self):
        print "test_construct_org"
        app = self.create_app()
        with app.app_context():
            git = GitCommands()
            org_name = git.construct_org_name(self.git_url)
            org_name1 = self.git_url.split("/")[-2]
            self.assertEqual(org_name, org_name1)

#+END_SRC

*** repo exists
**** implemenation
#+NAME: repo_exist 
#+BEGIN_SRC python

    def repo_exists(self, repo_name):
        current_app.logger.debug("dir = %s" % (self.git_clone_loc + repo_name))
        return os.path.isdir(self.git_clone_loc + repo_name)
#+END_SRC
**** test cases

#+NAME: test_repo_exist
#+BEGIN_SRC python

class TestRepoExist(unittest.TestCase):

    def create_app(self):
        app = create_app(config)
        with app.app_context():
            self.git = GitCommands()
        return app

    def setUp(self):
        self.create_app()
        self.git_url = "https://github.com/vlead/lab-data-service"
        self.git_clone_loc = self.git.git_clone_loc

    def tearDown(self):
        repo_path = self.git_clone_loc + self.git_url.split("/")[-1]
        shutil.rmtree(repo_path)

    def test_repo_exist(self):
        print "test_repo_exist"
        app = self.create_app()
        with app.app_context():
            git = GitCommands()
            repo_name = git.construct_repo_name(self.git_url)
            git.clone_repo(self.git_url, repo_name)
            self.assertEqual(git.repo_exists(repo_name), True)

#+END_SRC

*** clone repo
**** implementation
#+NAME: repo_clone 
#+BEGIN_SRC python

    def clone_repo(self, lab_src_url, repo_name):
        clone_cmd = "git clone %s %s%s" % (lab_src_url, self.git_clone_loc,
                                           repo_name)
        current_app.logger.debug(clone_cmd)
        try:
            (ret_code, output) = execute_command(clone_cmd)
            current_app.logger.debug("Clone repo successful")
        except Exception, e:
            current_app.logger.error("Error Cloning the repository: " + str(e))
            raise e
#+END_SRC
**** test cases

#+NAME: test_clone_repo
#+BEGIN_SRC python

class TestCloneRepo(unittest.TestCase):

    def create_app(self):
        app = create_app(config)
        with app.app_context():
            self.git = GitCommands()
        return app

    def setUp(self):
        self.create_app()
        self.git_url = "https://github.com/vlead/lab-data-service"
        self.git_clone_loc = self.git.git_clone_loc

    def tearDown(self):
        repo_path = self.git_clone_loc + self.git_url.split("/")[-1]
        shutil.rmtree(repo_path)

    def test_repo_clone(self):
        print "test_repo_clone"
        app = self.create_app()
        with app.app_context():
            git = GitCommands()
            repo_name = git.construct_repo_name(self.git_url)
            git.clone_repo(self.git_url, repo_name)
            self.assertEqual(git.repo_exists(repo_name), True)

#+END_SRC

*** pull repo

#+NAME: repo_pull
#+BEGIN_SRC python

    def pull_repo(self, repo_name, version):
        repo = self.git_clone_loc + repo_name
        #pull_cmd = "git --git-dir=%s/.git --work-tree=%s pull" % (repo, repo)
        pull_cmd = "git -C %s pull origin %s" % (repo, version)
        current_app.logger.debug("pull cmd: %s" % pull_cmd)
        try:
            (ret_code, output) = execute_command(pull_cmd)	    
            current_app.logger.debug("Pull repo successful")
	    return ret_code
        except Exception, e:
            current_app.logger.error("Error Pulling the repository: " + str(e))
            raise e
#+END_SRC
**** test cases

#+NAME: test_repo_pull
#+BEGIN_SRC python

class TestRepoPull(unittest.TestCase):

    def create_app(self):
        app = create_app(config)
        with app.app_context():
            self.git = GitCommands()
        return app

    def setUp(self):
        self.create_app()
        self.git_url = "https://github.com/vlead/lab-data-service"
        self.git_clone_loc = self.git.git_clone_loc

    def tearDown(self):
        repo_path = self.git_clone_loc + self.git_url.split("/")[-1]
        shutil.rmtree(repo_path)

    def test_repo_pull(self):
        print "test_repo_pull"
        app = self.create_app()
        with app.app_context():
            git = GitCommands()
            repo_name = git.construct_repo_name(self.git_url)
            git.clone_repo(self.git_url, repo_name)
	    git.checkout_version(repo_name, version="develop")
	    pull_status = git.pull_repo(repo_name, version="develop")
            self.assertEqual(pull_status, 0)

#+END_SRC

*** checkout version
**** implementation
#+NAME: repo_version
#+BEGIN_SRC python

    def checkout_version(self, repo_name, version=None):
        repo = self.git_clone_loc + repo_name
        if version is None:
            version = "master"
        checkout_cmd = "git --git-dir=%s/.git --work-tree=%s checkout %s" % (repo, repo, version)
        try:
            (ret_code, output) = execute_command(checkout_cmd)
            current_app.logger.debug("Checkout repo successful")
        except Exception, e:
            current_app.logger.error("Error checking out the repository: " + str(e))
            raise e
#+END_SRC
**** test cases

#+NAME: test_repo_version
#+BEGIN_SRC python

class TestRepoVersion(unittest.TestCase):

    def create_app(self):
        app = create_app(config)
        with app.app_context():
            self.git = GitCommands()
        return app

    def setUp(self):
        self.create_app()
        self.git_url = "https://github.com/vlead/lab-data-service"
        self.git_clone_loc = self.git.git_clone_loc

    def tearDown(self):
        repo_path = self.git_clone_loc + self.git_url.split("/")[-1]
        shutil.rmtree(repo_path)

    def test_repo_version(self):
        print "test_repo_version"
        app = self.create_app()
        with app.app_context():
            git = GitCommands()
            repo_name = git.construct_repo_name(self.git_url)
            git.clone_repo(self.git_url, repo_name)
	    git.checkout_version(repo_name, version="develop")
            self.assertEqual(git.get_repo_version(repo_name), "develop")

#+END_SRC

*** get git version
**** implementation
#+NAME: get_repo_version
#+BEGIN_SRC python

    def get_repo_version(self, repo_name):
        repo_path = self.git_clone_loc + repo_name
        try:
	   repo = Repo(repo_path)
	   branch = repo.active_branch
	   return str(branch.name)
        except Exception, e:
            current_app.logger.error("Error checking out the repository: " + str(e))
            raise e
#+END_SRC
**** test cases

#+NAME: test_get_repo_version
#+BEGIN_SRC python

class TestGetRepoVersion(unittest.TestCase):

    def create_app(self):
        app = create_app(config)
        with app.app_context():
            self.git = GitCommands()
        return app

    def setUp(self):
        self.create_app()
        self.git_url = "https://github.com/vlead/lab-data-service"
        self.git_clone_loc = self.git.git_clone_loc

    def tearDown(self):
        repo_path = self.git_clone_loc + self.git_url.split("/")[-1]
        shutil.rmtree(repo_path)

    def test_get_repo_version(self):
        print "test_get_repo_version"
        app = self.create_app()
        with app.app_context():
            git = GitCommands()
            repo_name = git.construct_repo_name(self.git_url)
            git.clone_repo(self.git_url, repo_name)
	    git.checkout_version(repo_name, version="develop")
            self.assertEqual(git.get_repo_version(repo_name), "develop")

#+END_SRC

*** get git commit info
**** implementation
#+NAME: get_commit_info
#+BEGIN_SRC python

    def get_commit_info(self, repo_name):
        repo_path = self.git_clone_loc + repo_name
        try:
	   repo = Repo(repo_path)
	   master = repo.head.reference
	   commit_info = {
	                 "branch" : master.name,
			 "last_commit" : master.commit.hexsha,
			 "last_commit_msg" : master.commit.message,
			 "commit_date" : datetime.datetime.fromtimestamp(master.commit.committed_date),
			 "author_name" : master.commit.author.name
			 }
           current_app.logger.debug("Last commit info: %s " % (commit_info))
	   return commit_info
        except Exception, e:
            current_app.logger.error("Error checking out the repository: " + str(e))
            raise e
#+END_SRC
**** test cases

#+NAME: test_get_commit_info
#+BEGIN_SRC python

class TestGetCommitInfo(unittest.TestCase):

    def create_app(self):
        app = create_app(config)
        with app.app_context():
            self.git = GitCommands()
        return app

    def setUp(self):
        self.create_app()
        self.git_url = "https://github.com/ksripathi/test-project1"
        self.git_clone_loc = self.git.git_clone_loc

    def tearDown(self):
        repo_path = self.git_clone_loc + self.git_url.split("/")[-1]
        #shutil.rmtree(repo_path)

    def test_get_commit_info(self):
        print "test_get_commit_info"
        app = self.create_app()
        with app.app_context():
            git = GitCommands()
            repo_name = git.construct_repo_name(self.git_url)
            git.clone_repo(self.git_url, repo_name)
	    git.checkout_version(repo_name, version="develop")
	    git.get_commit_info(repo_name)
            self.assertEqual(git.get_repo_version(repo_name), "develop")

#+END_SRC

*** Create an issue on github repository
  :PROPERTIES:
  :CUSTOM_ID: git_issue
  :END:    
 
 This function creates a required github issue and assigns the respective label to it
 in a particular repository. This is helps in notifying the
 project's contributors about the consequences of different commits
 i.e. whether it results in a successful build or not. 

**** Implementation
#+NAME: create_issue
#+BEGIN_SRC python

    def makeGithubIssue(self, git_url, title, body=None, assignee=None, milestone=None, labels=None):
	repo_name = self.construct_repo_name(git_url)
	repo_org = self.construct_org_name(git_url)
	git_api_url = '%s/%s/%s/issues' % (GIT_API, repo_org, repo_name)
	current_app.logger.debug("Git REST API URL : %s" % (git_api_url))
	body = self.get_commit_info(repo_name)
	try:
	    import json
	    session = requests.Session()
	    session.auth = (USERNAME, PASSWORD)
	    issue = {'title': title,
		     'body': str(body),
		     'assignee': '',
		     'milestone': None,
		     'labels': labels
		 }

	    current_app.logger.debug("Creating issue on git repository = %s under organization = %s" % (repo_name, repo_org))
	    r = session.post(git_api_url, json.dumps(issue))
	    if r.status_code == 201:
		current_app.logger.debug("Successfully created Issue with title : %s on repository = %s" % (title, repo_name))
		return True
	    else:
		current_app.logger.error("Could not creat Issue : %s on repository = %s" % (title, repo_name))
		current_app.logger.error("Response : %s" % r.content)
		return False
	except Exception as e:
	    current_app.logger.error("Exception : %s" % str(e))
	    raise str(e)

#+END_SRC

**** test cases
#+NAME: test_create_issue
#+BEGIN_SRC python

class TesteCreateGitIssue(unittest.TestCase):
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
	self.git_url = "https://github.com/ksripathi/Documents" 

    def tearDown(self):
	pass

    def test_create_git_issue(self):
        print "test_create_git_issue"
        app = self.create_app()
        with app.app_context():
            git = GitCommands()
            title = "test issue"
 	    labels = ["build_failed"]
	    ret_status = git.makeGithubIssue(self.git_url, title, body=None, assignee=None, milestone=None, labels=labels)
            self.assertEqual(ret_status, True)

#+END_SRC

** Execute Shell Commands
*** implementation
#+NAME: execute_shell_cmd
#+BEGIN_SRC python

import subprocess
#from __init__ import *

__all__ = ['execute_command']

# Backporting check_output from 2.7 to 2.6
if "check_output" not in dir(subprocess):
    def f(*popenargs, **kwargs):
        if 'stdout' in kwargs:
            raise ValueError(
                'stdout argument not allowed, it will be overridden'
            )
        process = subprocess.Popen(stdout=subprocess.PIPE,
                                   *popenargs, **kwargs)
        output, unused_err = process.communicate()
        retcode = process.poll()
        if retcode:
            cmd = kwargs.get("args")
            if cmd is None:
                cmd = popenargs[0]
            raise subprocess.CalledProcessError(retcode, cmd)
        return output
    subprocess.check_output = f


def execute_command(cmd):
    return_code = -1
    output = None
    try:
        output = subprocess.check_output(cmd, shell=True)
        return_code = 0
    except subprocess.CalledProcessError as cpe:
        raise cpe
    except OSError as ose:
        raise ose

    return (return_code, output)


if __name__ == '__main__':
    '''
    cmd = "git clone " +\
        "https://github.com/Virtual-Labs/computer-programming-iiith.git " \
        "/root/labs/cse02-programming"
   '''
    cmd = "ls -la"

    try:
        (ret_code, output) = execute_command(cmd)
    except Exception, e:
        pass


#+END_SRC

*** test cases

#+NAME: test_execute_shell_cmd
#+BEGIN_SRC python

class TestExecuteCmd(unittest.TestCase):

    def create_app(self):
        app = create_app(config)
        with app.app_context():
            self.git = GitCommands()
        return app

    def setUp(self):
        self.git_url = "https://github.com/vlead/lab-data-service"

    def tearDown(self):
        pass

    def test_exec_cmd(self):
        print "test_exec_cmd"
        app = self.create_app()
        with app.app_context():
	    command = "ls -l"
	    (ret_code, output) = execute_command(command)
            self.assertEqual(ret_code, 0)

#+END_SRC

** Clone repository
  :PROPERTIES:
  :CUSTOM_ID: clone_repository
  :END:    
  
  This class contains a function which clones a repository if it is already not present.If the 
  repository is already present it pulls the updated repository.
  While performing the above actions it also simultaneously logs the actions with the respective status 
  of failure and success.

*** Implementation
#+NAME: clone_repository
#+BEGIN_SRC python
class RepoClone:

    def __init__(self,git_url):
	self.git_url = git_url

    def repoCloner(self): #clone_repo before  
	(repo_name, repo_author) = repoNameExtacter(self.git_url)
	ret_val = isRepoExist(repo_name)

	if not ret_val:
	    command = "git clone %s; cd %s;git checkout %s;git pull" % (self.git_url, repo_name, GIT_BRANCH)
	    current_app.logger.debug("Git clone command : %s" % (command))
	    (ret_code, output) = linuxCommandExecuter(command)
	    if ret_code == 0:
		current_app.logger.debug("Successfully cloned repo : %s" % (self.git_url))
		return True
	else:
	    current_app.logger.debug("repository already present, pulling repo : %s" % (self.git_url))
	    command = "cd %s; git checkout %s;git pull" % (repo_name, GIT_BRANCH)
	    (ret_code, output) = linuxCommandExecuter(command)
	    if ret_code == 0:
		current_app.logger.debug("Successfully pulls the repository : %s" % (self.git_url))
		return True
	    else:
		current_app.logger.debug("Failed to pulls the repository : %s" % (self.git_url))
		return False

#+END_SRC

*** Unit Test for RepoClone 
This runs a unit test on the functionality provided by the above class

#+NAME: a
#+BEGIN_SRC python

class TestClone(unittest.TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        self.git_url = "https://github.com/vlead/lab-data-service"

    def tearDown(self):
        shutil.rmtree("lab-data-service")

    def test_ci_clone(self):
        app = self.create_app()
        with app.app_context():
            print "test_ci_clone"
            rc = RepoClone(self.git_url)
            self.assertEqual(rc.repoCloner(), True)

#+END_SRC

** Build the repository
  :PROPERTIES:
  :CUSTOM_ID: build_repository
  :END:    
  This Class contains the function which builds the
  github repository.
  
 - If the build is unsuccessful it 
  creates an issue on respective git repository and
  assigns a label called =build_failed= to it.

- If build is generated successfully it creates an issue on github
  repository and assigns label called =build_passed= and closes the
  issue.


*** Implementation

#+NAME: build_repo
#+BEGIN_SRC python

class RepoBuild:

    def __init__(self, git_url):
	self.git_url = git_url
	self.git = GitCommands()

    '''This function is used to run the make commmand'''
    def repoBuilder(self):

	repo_name = self.git.construct_repo_name(self.git_url)
	repo_path = self.git.git_clone_loc + repo_name
	mk_cmd = 'make -C %s' % (repo_path)
	current_app.logger.debug("Running make command = %s" % (mk_cmd))
	(ret_code, output) = execute_command(mk_cmd)
	if ret_code == 0:
	    current_app.logger.debug("build generated successfully")
	    return True
        else:
	    current_app.logger.error("Couldn't generate build")
	    return False
              
#+END_SRC


*** Unit Test for RepoBuild
    This runs a unit test on the functionality provided by the above class.

#+NAME: test_build_repo
#+BEGIN_SRC python

class TestBuild(unittest.TestCase):
    def create_app(self):
        app = create_app(config)
        with app.app_context():
            self.git = GitCommands()
        return app

    def setUp(self):
        self.create_app()
        self.git_url = "https://github.com/vlead/lab-data-service"
        self.git_clone_loc = self.git.git_clone_loc

    def tearDown(self):
        repo_path = self.git_clone_loc + self.git_url.split("/")[-1]
        shutil.rmtree(repo_path)

    def test_repo_build(self):
        print "test_repo_build"
        app = self.create_app()
        with app.app_context():
            git = GitCommands()
            repo_name = git.construct_repo_name(self.git_url)
            git.clone_repo(self.git_url, repo_name)
            repo_build = RepoBuild(self.git_url)
            self.assertEqual(repo_build.repoBuilder(), True)


#+END_SRC

** Tests run
  :PROPERTIES:
  :CUSTOM_ID: run_tests
  :END:    
  This Class contains the function which builds the
  github repository.
  
 - If the build is unsuccessful it 
  creates an issue on respective git repository and
  assigns a label called =build_failed= to it.

- If build is generated successfully it creates an issue on github
  repository and assigns label called =build_passed= and closes the
  issue.


*** Implementation

#+NAME: run_test
#+BEGIN_SRC python

class TestRun:

    def __init__(self, git_url):
	self.git_url = git_url
	self.git = GitCommands()
	self.repo_name = self.git.construct_repo_name(self.git_url)
	self.repo_path = self.git.git_clone_loc + self.repo_name

    def createTestEnv(self):

	setup_file_path = self.repo_path + "/build/code/deployment"
	cmd = 'sudo python %s/setup.py install' % (setup_file_path)
	current_app.logger.debug("Running command = %s" % (cmd))
	(ret_code, output) = execute_command(cmd)
	try:
       	   if ret_code == 0:
		current_app.logger.debug("Installed all python packages")
		return True
	   else:
		current_app.logger.error("failed to install python packages")
		return False
        except Exception as e:
	       current_app.logger.error("Exception = %s" % str(e))
	       return False

    def runTestSuit(self):
        src_path = self.git.git_clone_loc + self.repo_name + "/build/code" 
        os.chdir(src_path)
        find_cmd = "find . -name '*test*.py'"
        cmd = subprocess.Popen([find_cmd], shell=True, stdout=subprocess.PIPE).stdout
        test_files = cmd.read().splitlines()
	sys.path.append(src_path)
	count = 0
	try:
	    for test_file in test_files:
		cmd = "export PYTHONPATH=$(pwd);python %s" % (test_file)
		(ret_code, output) = execute_command(cmd)
		if ret_code == 0:
		    current_app.logger.debug("Ran test file = %s" % (test_file))
		    count = count + 1
            if count == len(test_files):
	        title = "successfully ran all test cases"
		labels = ["build_passed"]
		body = "Ran test files : %s" %(test_files)
		self.git.makeGithubIssue(self.git_url, title, body=None, assignee=None, milestone=None, labels=labels)
		return True
	except Exception as e:
	    current_app.logger.error("Couldn't Ran test file = %s" % (test_file))
	    title = "Failed to run test file %s" % (test_file)
	    labels = ["build_failed"]
	    self.git.makeGithubIssue(self.git_url, title, body=None, assignee=None, milestone=None, labels=labels)
	    current_app.logger.error("Exception = %s" % (str(e)))
	    return False

              
#+END_SRC


*** Unit Test for createTestEnv
    This runs a unit test on the functionality provided by the above
    class.

#+NAME: test_run_test
#+BEGIN_SRC python

class TestCreateTestEnv(unittest.TestCase):
    def create_app(self):
        app = create_app(config)
        with app.app_context():
            self.git = GitCommands()
        return app

    def setUp(self):
        self.create_app()
        self.git_url = "https://github.com/vlead/lab-data-service"
        self.git_clone_loc = self.git.git_clone_loc

    def tearDown(self):
        repo_path = self.git_clone_loc + self.git_url.split("/")[-1]
        #shutil.rmtree(repo_path)

    def test_create_test_env(self):
        print "test_create_test_env"
        app = self.create_app()
        with app.app_context():
            git = GitCommands()
            repo_name = git.construct_repo_name(self.git_url)
            git.clone_repo(self.git_url, repo_name)
            repo_build = RepoBuild(self.git_url)
	    repo_build.repoBuilder()
	    tr = TestRun(self.git_url)
	    tr.createTestEnv()
	    tr.runTestSuit()
            self.assertEqual(tr.createTestEnv(), True)


#+END_SRC

** Execute shell commands
  :PROPERTIES:
  :CUSTOM_ID: execute_cmd
  :END:    

*** Implementation
   This is a utility function which executes the linux command and returns
   status code to identify the success or failiure of execution of the respective command on the machine.
   This function is extensively used by the other functions.

#+NAME: exec_commands
#+BEGIN_SRC python

def linuxCommandExecuter(cmd):
    current_app.logger.debug("command: %s" % cmd)
    
    return_code = -1 #If the linux command executes successfully it returns zero
    output = None
    
    try:
        output = subprocess.check_output(cmd, shell=True)
        return_code = 0
    
    except subprocess.CalledProcessError as cpe:
        current_app.logger.error("Called Process Error Message: %s" % cpe.output)
        raise cpe
    
    except OSError as ose:
        current_app.logger.error("OSError: %s" % ose.output)
        raise ose

    return (return_code, output)

#+END_SRC

*** Unit Test for the above function 
#+NAME: test_exec_cmd
#+BEGIN_SRC python

class TesteExecuteCommand(unittest.TestCase):
    
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
	pass

    def tearDown(self):
	pass

    def test_command_executer(self):
	print "test_command_executer"
        app = self.create_app()
        with app.app_context():
            url = "https://github.com/vlead/lab-data-service.git"        
            (ret_code, output) = linuxCommandExecuter("ls")
            self.assertEqual(ret_code, 0)

#+END_SRC

** Extract git repository and organization names 
  :PROPERTIES:
  :CUSTOM_ID: get_repo_org
  :END:    
  
   This function is used to extract the repository name and it's
   associated organization name from a given github repository url.

*** Implementation
#+NAME: get_repo_name
#+BEGIN_SRC python

def repoNameExtacter(repo_url): 

    try:
       repo_data = repo_url.split("/")
       repo_name = repo_data[-1]
       org_name = repo_data[-2]
       current_app.logger.debug("repo_name %s, author_name = %s" % (repo_name, org_name))
       return (repo_name, org_name)

    except Exception as e:
       current_app.logger.error("Exception %s" % (str(e)))
       raise str(e)

#+END_SRC

*** Unit Test for the above funtion.
#+NAME: test_extract_repo
#+BEGIN_SRC python

class TesteExtractRepo(unittest.TestCase):
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        self.git_url = "https://github.com/vlead/lab-data-service"        

    def tearDown(self):
	pass

    def test_extract_repo(self):
        print "test_extract_repo"
        app = self.create_app()
        with app.app_context():            
            (repo_name, repo_org) = repoNameExtacter(self.url)
            self.assertEqual(repo_name, "lab-data-service")
            self.assertEqual(repo_org, "vlead")

#+END_SRC

** Push docs to doc server 
  :PROPERTIES:
  :CUSTOM_ID: doc_push
  :END: 
  
  This utility function pushes the literate documentation
  of a lab/service which are generated in the docs folder
  to a document server which is generally hosted in staging
  environment.
  
*** Implementation
#+NAME: push_docs
#+BEGIN_SRC python

def docsPusher(repo_name):
    git = GitCommands()
    git_clone_loc = git.git_clone_loc
    SRC_DIR = ("%s/build/docs/" % (git_clone_loc + repo_name))
    try:
        IP_ADDRESS = "root@127.0.0.1"
        copy_command = "rsync -arz --progress " + SRC_DIR + " " + IP_ADDRESS + ":" + DEST_DIR + "/" + repo_name
        current_app.logger.debug("copy command = %s" % copy_command)
        (ret_code, output) = execute_command(copy_command)
        if ret_code == 0:
	    current_app.logger.debug("Copied SRC_DIR = %s to DEST_DIR = %s/%s/%s" % (SRC_DIR, IP_ADDRESS, DEST_DIR, repo_name))
	    return True
        else:
            current_app.logger.debug("Copy Unsuccessful from SRC_DIR = %s to DEST_DIR = %s/%s/%s" % (SRC_DIR, IP_ADDRESS, DEST_DIR, repo_name))
	    current_app.logger.debug("Command = %s , return code = %s" % (copy_command, str(ret_code)))
	    return False
    except Exception, e:
        current_app.logger.error("ERROR = %s" % str(e))
        return False

#+END_SRC

*** test cases
#+NAME: test_push_docs
#+BEGIN_SRC python

class TestPushDocs(unittest.TestCase):
    def create_app(self):
        app = create_app(config)
        with app.app_context():
            self.git = GitCommands()
        return app

    def setUp(self):
        self.create_app()
        self.git_url = "https://github.com/ksripathi/test-project1"
        self.git_clone_loc = self.git.git_clone_loc

    def tearDown(self):
        repo_path = self.git_clone_loc + self.git_url.split("/")[-1]
        shutil.rmtree(repo_path)

    def test_push_docs(self):
        print "test_push_docs"
        app = self.create_app()
        with app.app_context():
            git = GitCommands()
            repo_name = git.construct_repo_name(self.git_url)
            git.clone_repo(self.git_url, repo_name)
            repo_build = RepoBuild(self.git_url)
	    repo_build.repoBuilder()
            self.assertEqual(docsPusher(repo_name), True)

#+END_SRC

** Repo_exist
  :PROPERTIES:
  :CUSTOM_ID: exist_repository
  :END:    

This function is used to check the validity of the github repository (i.e. it's existence).

*** Implementation
#+NAME: repository_exist
#+BEGIN_SRC python

def isRepoExist(repo_name):
    current_app.logger.debug("Checking repo %s existance" % (repo_name))
    try:
       ret_val = os.path.exists(repo_name)
       if ret_val:
           current_app.logger.debug("Repository = %s arleady exists" % (repo_name))
           return ret_val
       else:
           current_app.logger.debug("Repository = %s not exists" % (repo_name))
           return ret_val           

    except subprocess.CalledProcessError as cpe:
        current_app.logger.error("Called Process Error Message: %s" % cpe.output)
        raise cpe

    except OSError as ose:
        current_app.logger.error("OSError: %s" % ose.output)
        raise ose

#+END_SRC

*** Unit Test for the above function.
#+NAME: test_repo_exists
#+BEGIN_SRC python

class TesteRepoExist(unittest.TestCase):
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
	self.git_url = "https://github.com/vlead/lab-data-service"

    def tearDown(self):
        shutil.rmtree("lab-data-service")

    def test_repo_exist(self):
	print "test_repo_exist"
        app = self.create_app()
        with app.app_context():            
            rc = RepoClone(self.git_url)
            rc.repoCloner()
            (repo_name, repo_org) = repoNameExtacter(self.git_url)
            self.assertEqual(isRepoExist(repo_name), True)

#+END_SRC

** REST API to build the souces of github repository
   - This API clones/pulls the repository and then builds the
     sources. If build is failed to generate it will create an issue
     on respective repository by assigning label called =build_failed=
     otherwise =build_passed=.

   - This API is invoked from github repository as a webhook request
     as soon as a new tag is released.

*** API Design
  :PROPERTIES:
  :CUSTOM_ID: ci_hook_api
  :END:    
  - URL :: /ci_build_sources

  - Method :: POST

  - URL Params ::  None

  - Payload :: 
#+BEGIN_EXAMPLE
    {
      "zen": "Responsive is better than fast.",
      "hook_id": 14493403,
      "hook": {
        "type": "Repository",
        "id": 14493403,
        "name": "web",
        "active": true,
        "events": [
          "push"
        ],
        "config": {
          "content_type": "json",
          "insecure_ssl": "0",
          "url": "http://ci.vlabs.ac.in:5000/git"
        },
        "updated_at": "2017-06-21T09:35:07Z",
        "created_at": "2017-06-21T09:35:07Z",
        "url": "https://api.github.com/repos/ksripathi/lab-data-service/hooks/14493403",
        "test_url": "https://api.github.com/repos/ksripathi/lab-data-service/hooks/14493403/test",
        "ping_url": "https://api.github.com/repos/ksripathi/lab-data-service/hooks/14493403/pings",
        "last_response": {
          "code": null,
          "status": "unused",
          "message": null
        }
      },
      "repository": {
        "id": 93591178,
        "name": "lab-data-service",
        "full_name": "ksripathi/lab-data-service",
        "owner": {
          "login": "ksripathi",
          "id": 8774380,
          "avatar_url": "https://avatars3.githubusercontent.com/u/8774380?v=3",
          "gravatar_id": "",
          "url": "https://api.github.com/users/ksripathi",
          "html_url": "https://github.com/ksripathi",
          "followers_url": "https://api.github.com/users/ksripathi/followers",
          "following_url": "https://api.github.com/users/ksripathi/following{/other_user}",
          "gists_url": "https://api.github.com/users/ksripathi/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/ksripathi/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/ksripathi/subscriptions",
          "organizations_url": "https://api.github.com/users/ksripathi/orgs",
          "repos_url": "https://api.github.com/users/ksripathi/repos",
          "events_url": "https://api.github.com/users/ksripathi/events{/privacy}",
          "received_events_url": "https://api.github.com/users/ksripathi/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/ksripathi/lab-data-service",
        "description": null,
        "fork": true,
        "url": "https://api.github.com/repos/ksripathi/lab-data-service",
        "forks_url": "https://api.github.com/repos/ksripathi/lab-data-service/forks",
        "keys_url": "https://api.github.com/repos/ksripathi/lab-data-service/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/ksripathi/lab-data-service/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/ksripathi/lab-data-service/teams",
        "hooks_url": "https://api.github.com/repos/ksripathi/lab-data-service/hooks",
        "issue_events_url": "https://api.github.com/repos/ksripathi/lab-data-service/issues/events{/number}",
        "events_url": "https://api.github.com/repos/ksripathi/lab-data-service/events",
        "assignees_url": "https://api.github.com/repos/ksripathi/lab-data-service/assignees{/user}",
        "branches_url": "https://api.github.com/repos/ksripathi/lab-data-service/branches{/branch}",
        "tags_url": "https://api.github.com/repos/ksripathi/lab-data-service/tags",
        "blobs_url": "https://api.github.com/repos/ksripathi/lab-data-service/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/ksripathi/lab-data-service/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/ksripathi/lab-data-service/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/ksripathi/lab-data-service/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/ksripathi/lab-data-service/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/ksripathi/lab-data-service/languages",
        "stargazers_url": "https://api.github.com/repos/ksripathi/lab-data-service/stargazers",
        "contributors_url": "https://api.github.com/repos/ksripathi/lab-data-service/contributors",
        "subscribers_url": "https://api.github.com/repos/ksripathi/lab-data-service/subscribers",
        "subscription_url": "https://api.github.com/repos/ksripathi/lab-data-service/subscription",
        "commits_url": "https://api.github.com/repos/ksripathi/lab-data-service/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/ksripathi/lab-data-service/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/ksripathi/lab-data-service/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/ksripathi/lab-data-service/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/ksripathi/lab-data-service/contents/{+path}",
        "compare_url": "https://api.github.com/repos/ksripathi/lab-data-service/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/ksripathi/lab-data-service/merges",
        "archive_url": "https://api.github.com/repos/ksripathi/lab-data-service/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/ksripathi/lab-data-service/downloads",
        "issues_url": "https://api.github.com/repos/ksripathi/lab-data-service/issues{/number}",
        "pulls_url": "https://api.github.com/repos/ksripathi/lab-data-service/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/ksripathi/lab-data-service/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/ksripathi/lab-data-service/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/ksripathi/lab-data-service/labels{/name}",
        "releases_url": "https://api.github.com/repos/ksripathi/lab-data-service/releases{/id}",
        "deployments_url": "https://api.github.com/repos/ksripathi/lab-data-service/deployments",
        "created_at": "2017-06-07T04:04:59Z",
        "updated_at": "2017-06-07T04:05:00Z",
        "pushed_at": "2017-06-08T11:11:07Z",
        "git_url": "git://github.com/ksripathi/lab-data-service.git",
        "ssh_url": "git@github.com:ksripathi/lab-data-service.git",
        "clone_url": "https://github.com/ksripathi/lab-data-service.git",
        "svn_url": "https://github.com/ksripathi/lab-data-service",
        "homepage": null,
        "size": 8979,
        "stargazers_count": 0,
        "watchers_count": 0,
        "language": "Shell",
        "has_issues": false,
        "has_projects": true,
        "has_downloads": true,
        "has_wiki": true,
        "has_pages": false,
        "forks_count": 0,
        "mirror_url": null,
        "open_issues_count": 0,
        "forks": 0,
        "open_issues": 0,
        "watchers": 0,
        "default_branch": "master"
      },
      "sender": {
        "login": "ksripathi",
        "id": 8774380,
        "avatar_url": "https://avatars3.githubusercontent.com/u/8774380?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ksripathi",
        "html_url": "https://github.com/ksripathi",
        "followers_url": "https://api.github.com/users/ksripathi/followers",
        "following_url": "https://api.github.com/users/ksripathi/following{/other_user}",
        "gists_url": "https://api.github.com/users/ksripathi/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ksripathi/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ksripathi/subscriptions",
        "organizations_url": "https://api.github.com/users/ksripathi/orgs",
        "repos_url": "https://api.github.com/users/ksripathi/repos",
        "events_url": "https://api.github.com/users/ksripathi/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ksripathi/received_events",
        "type": "User",
        "site_admin": false
      }
    }

#+END_EXAMPLE
  - Success Response
    + Status_Code: 200
      + Contents :
#+BEGIN_EXAMPLE
{
"status_code" : 200,
"message" : "Successfully build the sources" 
}
#+END_EXAMPLE    
  - Error Response:
    + Contents :
      {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
 http://localhost:5000/ci_build_sources
#+END_EXAMPLE
*** Implementation   
#+NAME: ci_build_sources
#+BEGIN_SRC python
@api.route("/ci_build_sources", methods = ['POST', 'GET'])
def build_sources():

    if request.method == 'POST':
	try:
	    repo_data = request.get_json()
	    git_url = repo_data['repository']['html_url']
	    current_app.logger.debug("Git repository URL : %s" % (git_url))
	except Exception as e:
	    current_app.logger.error("Error in request data : %s" % (str(e)))
	    raise str(e)
    else:
	return "Method not allowed"
    git = GitCommands()
    repo_name = git.construct_repo_name(git_url)

    if git.repo_exists(repo_name):
        git.pull_repo(repo_name, GIT_BRANCH)	
    else:
        git.clone_repo(git_url, repo_name)
    git.checkout_version(repo_name, GIT_BRANCH)
    repo_build = RepoBuild(git_url)
    if (repo_build.repoBuilder()):
        message = {
	          "status" : 200,
		  "message" : "Successfully builds the sources"
		  }
        current_app.logger.debug("Message %s" % (message))
	return jsonify(message)

    else:
        message = {
		  "status" : 500,
		  "message" : "Failed to build the source"
		  }
	current_app.logger.error("Message %s" % (message))
	return jsonify(message)

#+END_SRC

*** Test Cases
#+NAME: test_ci_build_sources
#+BEGIN_SRC python
class TestBuilSources(TestCase):
    TESTING = True
    def create_app(self):
	app = create_app(config)
	return app

    def setUp(self):
	pass

    def tearDown(self):
	pass

    def test_ci_build_sources(self):
	print "test_ci_build_sources"

	headers = {'Content-Type': 'application/json'}
	payload = {
	    "zen": "Responsive is better than fast.",
	    "hook_id": 14493403,
	    "hook": {
		"type": "Repository",
		"id": 14493403,
		"name": "web",
		"active": "true",
		"events": [
		    "push"
		],
		"config": {
		    "content_type": "json",
		    "insecure_ssl": "0",
		    "url": "http://ci.vlabs.ac.in:5000/git"
		},
		"updated_at": "2017-06-21T09:35:07Z",
		"created_at": "2017-06-21T09:35:07Z",
		"url": "https://api.github.com/repos/ksripathi/lab-data-service/hooks/14493403",
		"test_url": "https://api.github.com/repos/ksripathi/lab-data-service/hooks/14493403/test",
		"ping_url": "https://api.github.com/repos/ksripathi/lab-data-service/hooks/14493403/pings",
		"last_response": {
		    "code": "null",
		    "status": "unused",
		    "message": "null"
		}
	    },
	    "repository": {
		"id": 93591178,
		"name": "lab-data-service",
		"full_name": "ksripathi/lab-data-service",
		"owner": {
		    "login": "ksripathi",
		    "id": 8774380,
		    "avatar_url": "https://avatars3.githubusercontent.com/u/8774380?v=3",
		    "gravatar_id": "",
		    "url": "https://api.github.com/users/ksripathi",
		    "html_url": "https://github.com/ksripathi",
		    "followers_url": "https://api.github.com/users/ksripathi/followers",
		    "following_url": "https://api.github.com/users/ksripathi/following{/other_user}",
		    "gists_url": "https://api.github.com/users/ksripathi/gists{/gist_id}",
		    "starred_url": "https://api.github.com/users/ksripathi/starred{/owner}{/repo}",
		    "subscriptions_url": "https://api.github.com/users/ksripathi/subscriptions",
		    "organizations_url": "https://api.github.com/users/ksripathi/orgs",
		    "repos_url": "https://api.github.com/users/ksripathi/repos",
		    "events_url": "https://api.github.com/users/ksripathi/events{/privacy}",
		    "received_events_url": "https://api.github.com/users/ksripathi/received_events",
		    "type": "User",
		    "site_admin": "false"
		},
		"private": "false",
		"html_url": "https://github.com/ksripathi/test-project1",
		"description": "null",
		"fork": "true",
		"url": "https://api.github.com/repos/ksripathi/lab-data-service",
		"forks_url": "https://api.github.com/repos/ksripathi/lab-data-service/forks",
		"keys_url": "https://api.github.com/repos/ksripathi/lab-data-service/keys{/key_id}",
		"collaborators_url": "https://api.github.com/repos/ksripathi/lab-data-service/collaborators{/collaborator}",
		"teams_url": "https://api.github.com/repos/ksripathi/lab-data-service/teams",
		"hooks_url": "https://api.github.com/repos/ksripathi/lab-data-service/hooks",
		"issue_events_url": "https://api.github.com/repos/ksripathi/lab-data-service/issues/events{/number}",
		"events_url": "https://api.github.com/repos/ksripathi/lab-data-service/events",
		"assignees_url": "https://api.github.com/repos/ksripathi/lab-data-service/assignees{/user}",
		"branches_url": "https://api.github.com/repos/ksripathi/lab-data-service/branches{/branch}",
		"tags_url": "https://api.github.com/repos/ksripathi/lab-data-service/tags",
		"blobs_url": "https://api.github.com/repos/ksripathi/lab-data-service/git/blobs{/sha}",
		"git_tags_url": "https://api.github.com/repos/ksripathi/lab-data-service/git/tags{/sha}",
		"git_refs_url": "https://api.github.com/repos/ksripathi/lab-data-service/git/refs{/sha}",
		"trees_url": "https://api.github.com/repos/ksripathi/lab-data-service/git/trees{/sha}",
		"statuses_url": "https://api.github.com/repos/ksripathi/lab-data-service/statuses/{sha}",
		"languages_url": "https://api.github.com/repos/ksripathi/lab-data-service/languages",
		"stargazers_url": "https://api.github.com/repos/ksripathi/lab-data-service/stargazers",
		"contributors_url": "https://api.github.com/repos/ksripathi/lab-data-service/contributors",
		"subscribers_url": "https://api.github.com/repos/ksripathi/lab-data-service/subscribers",
		"subscription_url": "https://api.github.com/repos/ksripathi/lab-data-service/subscription",
		"commits_url": "https://api.github.com/repos/ksripathi/lab-data-service/commits{/sha}",
		"git_commits_url": "https://api.github.com/repos/ksripathi/lab-data-service/git/commits{/sha}",
		"comments_url": "https://api.github.com/repos/ksripathi/lab-data-service/comments{/number}",
		"issue_comment_url": "https://api.github.com/repos/ksripathi/lab-data-service/issues/comments{/number}",
		"contents_url": "https://api.github.com/repos/ksripathi/lab-data-service/contents/{+path}",
		"compare_url": "https://api.github.com/repos/ksripathi/lab-data-service/compare/{base}...{head}",
		"merges_url": "https://api.github.com/repos/ksripathi/lab-data-service/merges",
        	"archive_url": "https://api.github.com/repos/ksripathi/lab-data-service/{archive_format}{/ref}",
		"downloads_url": "https://api.github.com/repos/ksripathi/lab-data-service/downloads",
		"issues_url": "https://api.github.com/repos/ksripathi/lab-data-service/issues{/number}",
		"pulls_url": "https://api.github.com/repos/ksripathi/lab-data-service/pulls{/number}",
		"milestones_url": "https://api.github.com/repos/ksripathi/lab-data-service/milestones{/number}",
		"notifications_url": "https://api.github.com/repos/ksripathi/lab-data-service/notifications{?since,all,participating}",
		"labels_url": "https://api.github.com/repos/ksripathi/lab-data-service/labels{/name}",
		"releases_url": "https://api.github.com/repos/ksripathi/lab-data-service/releases{/id}",
		"deployments_url": "https://api.github.com/repos/ksripathi/lab-data-service/deployments",
		"created_at": "2017-06-07T04:04:59Z",
		"updated_at": "2017-06-07T04:05:00Z",
		"pushed_at": "2017-06-08T11:11:07Z",
		"git_url": "git://github.com/ksripathi/lab-data-service.git",
		"ssh_url": "git@github.com:ksripathi/lab-data-service.git",
		"clone_url": "https://github.com/ksripathi/lab-data-service.git",
		"svn_url": "https://github.com/ksripathi/lab-data-service",
		"homepage": "null",
		"size": 8979,
		"stargazers_count": 0,
		"watchers_count": 0,
		"language": "Shell",
		"has_issues": "false",
		"has_projects": "true",
		"has_downloads": "true",
		"has_wiki": "true",
		"has_pages": "false",
		"forks_count": 0,
		"mirror_url": "null",
		"open_issues_count": 0,
		"forks": 0,
		"open_issues": 0,
		"watchers": 0,
		"default_branch": "master"
	    },
	    "sender": {
		"login": "ksripathi",
		"id": 8774380,
		"avatar_url": "https://avatars3.githubusercontent.com/u/8774380?v=3",
		"gravatar_id": "",
		"url": "https://api.github.com/users/ksripathi",
		"html_url": "https://github.com/ksripathi",
		"followers_url": "https://api.github.com/users/ksripathi/followers",
		"following_url": "https://api.github.com/users/ksripathi/following{/other_user}",
		"gists_url": "https://api.github.com/users/ksripathi/gists{/gist_id}",
		"starred_url": "https://api.github.com/users/ksripathi/starred{/owner}{/repo}",
		"subscriptions_url": "https://api.github.com/users/ksripathi/subscriptions",
		"organizations_url": "https://api.github.com/users/ksripathi/orgs",
		"repos_url": "https://api.github.com/users/ksripathi/repos",
		"events_url": "https://api.github.com/users/ksripathi/events{/privacy}",
		"received_events_url": "https://api.github.com/users/ksripathi/received_events",
		"type": "User",
		"site_admin": "false"
	    }
	}


	response = self.client.post("/ci_build_sources", data=json.dumps(payload),
				 headers=headers)
	self.assertEqual(response.status_code, 200)

#+END_SRC


** REST API to push the docs into doc server
   - This API clones/pulls the repository and then builds the
     sources. If build is failed to generate it will create an issue
     on respective repository by assigning label called =build_failed=
     otherwise =build_passed=.

   - After build ran successfully all the literate documentation of
     the repository will be moved into =doc-server=

   - This API is invoked from github repository as a webhook request
     as soon as a new tag is released.
   
   
*** API Design
  :PROPERTIES:
  :CUSTOM_ID: ci_hook_api
  :END:    
  - URL :: /ci_push_docs

  - Method :: POST

  - URL Params ::  None

  - Payload :: 

#+BEGIN_EXAMPLE
    {
      "zen": "Responsive is better than fast.",
      "hook_id": 14493403,
      "hook": {
        "type": "Repository",
        "id": 14493403,
        "name": "web",
        "active": true,
        "events": [
          "push"
        ],
        "config": {
          "content_type": "json",
          "insecure_ssl": "0",
          "url": "http://ci.vlabs.ac.in:5000/git"
        },
        "updated_at": "2017-06-21T09:35:07Z",
        "created_at": "2017-06-21T09:35:07Z",
        "url": "https://api.github.com/repos/ksripathi/lab-data-service/hooks/14493403",
        "test_url": "https://api.github.com/repos/ksripathi/lab-data-service/hooks/14493403/test",
        "ping_url": "https://api.github.com/repos/ksripathi/lab-data-service/hooks/14493403/pings",
        "last_response": {
          "code": null,
          "status": "unused",
          "message": null
        }
      },
      "repository": {
        "id": 93591178,
        "name": "lab-data-service",
        "full_name": "ksripathi/lab-data-service",
        "owner": {
          "login": "ksripathi",
          "id": 8774380,
          "avatar_url": "https://avatars3.githubusercontent.com/u/8774380?v=3",
          "gravatar_id": "",
          "url": "https://api.github.com/users/ksripathi",
          "html_url": "https://github.com/ksripathi",
          "followers_url": "https://api.github.com/users/ksripathi/followers",
          "following_url": "https://api.github.com/users/ksripathi/following{/other_user}",
          "gists_url": "https://api.github.com/users/ksripathi/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/ksripathi/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/ksripathi/subscriptions",
          "organizations_url": "https://api.github.com/users/ksripathi/orgs",
          "repos_url": "https://api.github.com/users/ksripathi/repos",
          "events_url": "https://api.github.com/users/ksripathi/events{/privacy}",
          "received_events_url": "https://api.github.com/users/ksripathi/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/ksripathi/lab-data-service",
        "description": null,
        "fork": true,
        "url": "https://api.github.com/repos/ksripathi/lab-data-service",
        "forks_url": "https://api.github.com/repos/ksripathi/lab-data-service/forks",
        "keys_url": "https://api.github.com/repos/ksripathi/lab-data-service/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/ksripathi/lab-data-service/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/ksripathi/lab-data-service/teams",
        "hooks_url": "https://api.github.com/repos/ksripathi/lab-data-service/hooks",
        "issue_events_url": "https://api.github.com/repos/ksripathi/lab-data-service/issues/events{/number}",
        "events_url": "https://api.github.com/repos/ksripathi/lab-data-service/events",
        "assignees_url": "https://api.github.com/repos/ksripathi/lab-data-service/assignees{/user}",
        "branches_url": "https://api.github.com/repos/ksripathi/lab-data-service/branches{/branch}",
        "tags_url": "https://api.github.com/repos/ksripathi/lab-data-service/tags",
        "blobs_url": "https://api.github.com/repos/ksripathi/lab-data-service/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/ksripathi/lab-data-service/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/ksripathi/lab-data-service/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/ksripathi/lab-data-service/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/ksripathi/lab-data-service/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/ksripathi/lab-data-service/languages",
        "stargazers_url": "https://api.github.com/repos/ksripathi/lab-data-service/stargazers",
        "contributors_url": "https://api.github.com/repos/ksripathi/lab-data-service/contributors",
        "subscribers_url": "https://api.github.com/repos/ksripathi/lab-data-service/subscribers",
        "subscription_url": "https://api.github.com/repos/ksripathi/lab-data-service/subscription",
        "commits_url": "https://api.github.com/repos/ksripathi/lab-data-service/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/ksripathi/lab-data-service/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/ksripathi/lab-data-service/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/ksripathi/lab-data-service/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/ksripathi/lab-data-service/contents/{+path}",
        "compare_url": "https://api.github.com/repos/ksripathi/lab-data-service/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/ksripathi/lab-data-service/merges",
        "archive_url": "https://api.github.com/repos/ksripathi/lab-data-service/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/ksripathi/lab-data-service/downloads",
        "issues_url": "https://api.github.com/repos/ksripathi/lab-data-service/issues{/number}",
        "pulls_url": "https://api.github.com/repos/ksripathi/lab-data-service/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/ksripathi/lab-data-service/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/ksripathi/lab-data-service/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/ksripathi/lab-data-service/labels{/name}",
        "releases_url": "https://api.github.com/repos/ksripathi/lab-data-service/releases{/id}",
        "deployments_url": "https://api.github.com/repos/ksripathi/lab-data-service/deployments",
        "created_at": "2017-06-07T04:04:59Z",
        "updated_at": "2017-06-07T04:05:00Z",
        "pushed_at": "2017-06-08T11:11:07Z",
        "git_url": "git://github.com/ksripathi/lab-data-service.git",
        "ssh_url": "git@github.com:ksripathi/lab-data-service.git",
        "clone_url": "https://github.com/ksripathi/lab-data-service.git",
        "svn_url": "https://github.com/ksripathi/lab-data-service",
        "homepage": null,
        "size": 8979,
        "stargazers_count": 0,
        "watchers_count": 0,
        "language": "Shell",
        "has_issues": false,
        "has_projects": true,
        "has_downloads": true,
        "has_wiki": true,
        "has_pages": false,
        "forks_count": 0,
        "mirror_url": null,
        "open_issues_count": 0,
        "forks": 0,
        "open_issues": 0,
        "watchers": 0,
        "default_branch": "master"
      },
      "sender": {
        "login": "ksripathi",
        "id": 8774380,
        "avatar_url": "https://avatars3.githubusercontent.com/u/8774380?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ksripathi",
        "html_url": "https://github.com/ksripathi",
        "followers_url": "https://api.github.com/users/ksripathi/followers",
        "following_url": "https://api.github.com/users/ksripathi/following{/other_user}",
        "gists_url": "https://api.github.com/users/ksripathi/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ksripathi/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ksripathi/subscriptions",
        "organizations_url": "https://api.github.com/users/ksripathi/orgs",
        "repos_url": "https://api.github.com/users/ksripathi/repos",
        "events_url": "https://api.github.com/users/ksripathi/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ksripathi/received_events",
        "type": "User",
        "site_admin": false
      }
    }

#+END_EXAMPLE
  - Success Response
    + Status_Code: 200
      + Contents :
#+BEGIN_EXAMPLE
{
"status_code" : 200,
"message" : "Successfully copied docs to doc server" 
}
#+END_EXAMPLE    
  - Error Response:
    + Contents :
      {
      "status" : 500,
      "message" : "Error in copying docs to docs server"
      }
    + {
      "status" : 500,
      "message" : "Failed to build the sources"
      }
    + {
      "status" : 500,
      "message" : "Failed to clone repository"
      }
  - Example:

#+BEGIN_EXAMPLE
 http://localhost:5000/ci_push_docs
#+END_EXAMPLE

*** Implementation   
  :PROPERTIES:
  :CUSTOM_ID: ci_hook
  :END:    

#+NAME: ci_push_docs
#+BEGIN_SRC python
@api.route("/ci_push_docs", methods = ['POST', 'GET'])
def ci_push_docs():

    if request.method == 'POST':
	try:
	    repo_data = request.get_json()
	    git_url = repo_data['repository']['html_url']
	    current_app.logger.debug("Git repository URL : %s" % (git_url))
	except Exception as e:
	    current_app.logger.error("Exception : %s" % (str(e)))
	    raise str(e)
    else:
	return "Method not allowed"
    git = GitCommands()
    tr = TestRun(git_url)    
    repo_name = git.construct_repo_name(git_url)

    if git.repo_exists(repo_name):
        git.pull_repo(repo_name, GIT_BRANCH)	
    else:
        git.clone_repo(git_url, repo_name)
    git.checkout_version(repo_name, GIT_BRANCH)
    repo_build = RepoBuild(git_url)
    repo_build.repoBuilder()
    
    tr.createTestEnv()
    if tr.runTestSuit():
        status = docsPusher(repo_name)  
	if status:
            current_app.logger.debug("Successfully copied the docs to doc server")
	    message = {
	              "status_code" : 200,
		      "message" : "Successfully copied docs to doc server" 
		      }
	return jsonify(message)

    else:
        message = {
	          "status" : 500,
		  "message" : "Error in copying docs to docs server"
		  }
	current_app.logger.error("Message %s" % (message))
	abort(500, message)

#+END_SRC

*** Test Cases
This an integration test for the above API.
#+NAME: test_ci_push_docs
#+BEGIN_SRC python
class TestPushDocs(TestCase):
    TESTING = True
    def create_app(self):
	app = create_app(config)
	return app

    def setUp(self):
	pass

    def tearDown(self):
	pass

    def test_ci_push_docs(self):
	print "test_ci_push_docs"

	headers = {'Content-Type': 'application/json'}
	payload = {
	    "zen": "Responsive is better than fast.",
	    "hook_id": 14493403,
	    "hook": {
		"type": "Repository",
		"id": 14493403,
		"name": "web",
		"active": "true",
		"events": [
		    "push"
		],
		"config": {
		    "content_type": "json",
		    "insecure_ssl": "0",
		    "url": "http://ci.vlabs.ac.in:5000/git"
		},
		"updated_at": "2017-06-21T09:35:07Z",
		"created_at": "2017-06-21T09:35:07Z",
		"url": "https://api.github.com/repos/ksripathi/lab-data-service/hooks/14493403",
		"test_url": "https://api.github.com/repos/ksripathi/lab-data-service/hooks/14493403/test",
		"ping_url": "https://api.github.com/repos/ksripathi/lab-data-service/hooks/14493403/pings",
		"last_response": {
		    "code": "null",
		    "status": "unused",
		    "message": "null"
		}
	    },
	    "repository": {
		"id": 93591178,
		"name": "lab-data-service",
		"full_name": "ksripathi/lab-data-service",
		"owner": {
		    "login": "ksripathi",
		    "id": 8774380,
		    "avatar_url": "https://avatars3.githubusercontent.com/u/8774380?v=3",
		    "gravatar_id": "",
		    "url": "https://api.github.com/users/ksripathi",
		    "html_url": "https://github.com/ksripathi",
		    "followers_url": "https://api.github.com/users/ksripathi/followers",
		    "following_url": "https://api.github.com/users/ksripathi/following{/other_user}",
		    "gists_url": "https://api.github.com/users/ksripathi/gists{/gist_id}",
		    "starred_url": "https://api.github.com/users/ksripathi/starred{/owner}{/repo}",
		    "subscriptions_url": "https://api.github.com/users/ksripathi/subscriptions",
		    "organizations_url": "https://api.github.com/users/ksripathi/orgs",
		    "repos_url": "https://api.github.com/users/ksripathi/repos",
		    "events_url": "https://api.github.com/users/ksripathi/events{/privacy}",
		    "received_events_url": "https://api.github.com/users/ksripathi/received_events",
		    "type": "User",
		    "site_admin": "false"
		},
		"private": "false",
		"html_url": "https://github.com/ksripathi/test-project1",
		"description": "null",
		"fork": "true",
		"url": "https://api.github.com/repos/ksripathi/lab-data-service",
		"forks_url": "https://api.github.com/repos/ksripathi/lab-data-service/forks",
		"keys_url": "https://api.github.com/repos/ksripathi/lab-data-service/keys{/key_id}",
		"collaborators_url": "https://api.github.com/repos/ksripathi/lab-data-service/collaborators{/collaborator}",
		"teams_url": "https://api.github.com/repos/ksripathi/lab-data-service/teams",
		"hooks_url": "https://api.github.com/repos/ksripathi/lab-data-service/hooks",
		"issue_events_url": "https://api.github.com/repos/ksripathi/lab-data-service/issues/events{/number}",
		"events_url": "https://api.github.com/repos/ksripathi/lab-data-service/events",
		"assignees_url": "https://api.github.com/repos/ksripathi/lab-data-service/assignees{/user}",
		"branches_url": "https://api.github.com/repos/ksripathi/lab-data-service/branches{/branch}",
		"tags_url": "https://api.github.com/repos/ksripathi/lab-data-service/tags",
		"blobs_url": "https://api.github.com/repos/ksripathi/lab-data-service/git/blobs{/sha}",
		"git_tags_url": "https://api.github.com/repos/ksripathi/lab-data-service/git/tags{/sha}",
		"git_refs_url": "https://api.github.com/repos/ksripathi/lab-data-service/git/refs{/sha}",
		"trees_url": "https://api.github.com/repos/ksripathi/lab-data-service/git/trees{/sha}",
		"statuses_url": "https://api.github.com/repos/ksripathi/lab-data-service/statuses/{sha}",
		"languages_url": "https://api.github.com/repos/ksripathi/lab-data-service/languages",
		"stargazers_url": "https://api.github.com/repos/ksripathi/lab-data-service/stargazers",
		"contributors_url": "https://api.github.com/repos/ksripathi/lab-data-service/contributors",
		"subscribers_url": "https://api.github.com/repos/ksripathi/lab-data-service/subscribers",
		"subscription_url": "https://api.github.com/repos/ksripathi/lab-data-service/subscription",
		"commits_url": "https://api.github.com/repos/ksripathi/lab-data-service/commits{/sha}",
		"git_commits_url": "https://api.github.com/repos/ksripathi/lab-data-service/git/commits{/sha}",
		"comments_url": "https://api.github.com/repos/ksripathi/lab-data-service/comments{/number}",
		"issue_comment_url": "https://api.github.com/repos/ksripathi/lab-data-service/issues/comments{/number}",
		"contents_url": "https://api.github.com/repos/ksripathi/lab-data-service/contents/{+path}",
		"compare_url": "https://api.github.com/repos/ksripathi/lab-data-service/compare/{base}...{head}",
		"merges_url": "https://api.github.com/repos/ksripathi/lab-data-service/merges",
        	"archive_url": "https://api.github.com/repos/ksripathi/lab-data-service/{archive_format}{/ref}",
		"downloads_url": "https://api.github.com/repos/ksripathi/lab-data-service/downloads",
		"issues_url": "https://api.github.com/repos/ksripathi/lab-data-service/issues{/number}",
		"pulls_url": "https://api.github.com/repos/ksripathi/lab-data-service/pulls{/number}",
		"milestones_url": "https://api.github.com/repos/ksripathi/lab-data-service/milestones{/number}",
		"notifications_url": "https://api.github.com/repos/ksripathi/lab-data-service/notifications{?since,all,participating}",
		"labels_url": "https://api.github.com/repos/ksripathi/lab-data-service/labels{/name}",
		"releases_url": "https://api.github.com/repos/ksripathi/lab-data-service/releases{/id}",
		"deployments_url": "https://api.github.com/repos/ksripathi/lab-data-service/deployments",
		"created_at": "2017-06-07T04:04:59Z",
		"updated_at": "2017-06-07T04:05:00Z",
		"pushed_at": "2017-06-08T11:11:07Z",
		"git_url": "git://github.com/ksripathi/lab-data-service.git",
		"ssh_url": "git@github.com:ksripathi/lab-data-service.git",
		"clone_url": "https://github.com/ksripathi/lab-data-service.git",
		"svn_url": "https://github.com/ksripathi/lab-data-service",
		"homepage": "null",
		"size": 8979,
		"stargazers_count": 0,
		"watchers_count": 0,
		"language": "Shell",
		"has_issues": "false",
		"has_projects": "true",
		"has_downloads": "true",
		"has_wiki": "true",
		"has_pages": "false",
		"forks_count": 0,
		"mirror_url": "null",
		"open_issues_count": 0,
		"forks": 0,
		"open_issues": 0,
		"watchers": 0,
		"default_branch": "master"
	    },
	    "sender": {
		"login": "ksripathi",
		"id": 8774380,
		"avatar_url": "https://avatars3.githubusercontent.com/u/8774380?v=3",
		"gravatar_id": "",
		"url": "https://api.github.com/users/ksripathi",
		"html_url": "https://github.com/ksripathi",
		"followers_url": "https://api.github.com/users/ksripathi/followers",
		"following_url": "https://api.github.com/users/ksripathi/following{/other_user}",
		"gists_url": "https://api.github.com/users/ksripathi/gists{/gist_id}",
		"starred_url": "https://api.github.com/users/ksripathi/starred{/owner}{/repo}",
		"subscriptions_url": "https://api.github.com/users/ksripathi/subscriptions",
		"organizations_url": "https://api.github.com/users/ksripathi/orgs",
		"repos_url": "https://api.github.com/users/ksripathi/repos",
		"events_url": "https://api.github.com/users/ksripathi/events{/privacy}",
		"received_events_url": "https://api.github.com/users/ksripathi/received_events",
		"type": "User",
		"site_admin": "false"
	    }
	}


	response = self.client.post("/ci_push_docs", data=json.dumps(payload),
				 headers=headers)
	self.assertEqual(response.status_code, 200)

#+END_SRC
** REST API to deploy the service/lab using ADS
   - This API clones/pulls the repository and then builds the
     sources. If build is failed to generate it will create an issue
     on respective repository by assigning label called =build_failed=
     otherwise =build_passed=.

   - After build ran successfully this repository will be deployed on
     =staging-server= using ADS service =RESTfull API's=.

   - This API is invoked from github repository as a webhook request
     as soon as a new tag is released.
 
*** API Design
  :PROPERTIES:
  :CUSTOM_ID: ci_hook_api
  :END:    
  - URL :: /ci_deploy_repo

  - Method :: POST

  - URL Params ::  None

  - Payload :: 
#+BEGIN_EXAMPLE
    {
      "zen": "Responsive is better than fast.",
      "hook_id": 14493403,
      "hook": {
        "type": "Repository",
        "id": 14493403,
        "name": "web",
        "active": true,
        "events": [
          "push"
        ],
        "config": {
          "content_type": "json",
          "insecure_ssl": "0",
          "url": "http://ci.vlabs.ac.in:5000/git"
        },
        "updated_at": "2017-06-21T09:35:07Z",
        "created_at": "2017-06-21T09:35:07Z",
        "url": "https://api.github.com/repos/ksripathi/lab-data-service/hooks/14493403",
        "test_url": "https://api.github.com/repos/ksripathi/lab-data-service/hooks/14493403/test",
        "ping_url": "https://api.github.com/repos/ksripathi/lab-data-service/hooks/14493403/pings",
        "last_response": {
          "code": null,
          "status": "unused",
          "message": null
        }
      },
      "repository": {
        "id": 93591178,
        "name": "lab-data-service",
        "full_name": "ksripathi/lab-data-service",
        "owner": {
          "login": "ksripathi",
          "id": 8774380,
          "avatar_url": "https://avatars3.githubusercontent.com/u/8774380?v=3",
          "gravatar_id": "",
          "url": "https://api.github.com/users/ksripathi",
          "html_url": "https://github.com/ksripathi",
          "followers_url": "https://api.github.com/users/ksripathi/followers",
          "following_url": "https://api.github.com/users/ksripathi/following{/other_user}",
          "gists_url": "https://api.github.com/users/ksripathi/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/ksripathi/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/ksripathi/subscriptions",
          "organizations_url": "https://api.github.com/users/ksripathi/orgs",
          "repos_url": "https://api.github.com/users/ksripathi/repos",
          "events_url": "https://api.github.com/users/ksripathi/events{/privacy}",
          "received_events_url": "https://api.github.com/users/ksripathi/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/ksripathi/lab-data-service",
        "description": null,
        "fork": true,
        "url": "https://api.github.com/repos/ksripathi/lab-data-service",
        "forks_url": "https://api.github.com/repos/ksripathi/lab-data-service/forks",
        "keys_url": "https://api.github.com/repos/ksripathi/lab-data-service/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/ksripathi/lab-data-service/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/ksripathi/lab-data-service/teams",
        "hooks_url": "https://api.github.com/repos/ksripathi/lab-data-service/hooks",
        "issue_events_url": "https://api.github.com/repos/ksripathi/lab-data-service/issues/events{/number}",
        "events_url": "https://api.github.com/repos/ksripathi/lab-data-service/events",
        "assignees_url": "https://api.github.com/repos/ksripathi/lab-data-service/assignees{/user}",
        "branches_url": "https://api.github.com/repos/ksripathi/lab-data-service/branches{/branch}",
        "tags_url": "https://api.github.com/repos/ksripathi/lab-data-service/tags",
        "blobs_url": "https://api.github.com/repos/ksripathi/lab-data-service/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/ksripathi/lab-data-service/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/ksripathi/lab-data-service/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/ksripathi/lab-data-service/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/ksripathi/lab-data-service/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/ksripathi/lab-data-service/languages",
        "stargazers_url": "https://api.github.com/repos/ksripathi/lab-data-service/stargazers",
        "contributors_url": "https://api.github.com/repos/ksripathi/lab-data-service/contributors",
        "subscribers_url": "https://api.github.com/repos/ksripathi/lab-data-service/subscribers",
        "subscription_url": "https://api.github.com/repos/ksripathi/lab-data-service/subscription",
        "commits_url": "https://api.github.com/repos/ksripathi/lab-data-service/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/ksripathi/lab-data-service/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/ksripathi/lab-data-service/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/ksripathi/lab-data-service/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/ksripathi/lab-data-service/contents/{+path}",
        "compare_url": "https://api.github.com/repos/ksripathi/lab-data-service/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/ksripathi/lab-data-service/merges",
        "archive_url": "https://api.github.com/repos/ksripathi/lab-data-service/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/ksripathi/lab-data-service/downloads",
        "issues_url": "https://api.github.com/repos/ksripathi/lab-data-service/issues{/number}",
        "pulls_url": "https://api.github.com/repos/ksripathi/lab-data-service/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/ksripathi/lab-data-service/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/ksripathi/lab-data-service/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/ksripathi/lab-data-service/labels{/name}",
        "releases_url": "https://api.github.com/repos/ksripathi/lab-data-service/releases{/id}",
        "deployments_url": "https://api.github.com/repos/ksripathi/lab-data-service/deployments",
        "created_at": "2017-06-07T04:04:59Z",
        "updated_at": "2017-06-07T04:05:00Z",
        "pushed_at": "2017-06-08T11:11:07Z",
        "git_url": "git://github.com/ksripathi/lab-data-service.git",
        "ssh_url": "git@github.com:ksripathi/lab-data-service.git",
        "clone_url": "https://github.com/ksripathi/lab-data-service.git",
        "svn_url": "https://github.com/ksripathi/lab-data-service",
        "homepage": null,
        "size": 8979,
        "stargazers_count": 0,
        "watchers_count": 0,
        "language": "Shell",
        "has_issues": false,
        "has_projects": true,
        "has_downloads": true,
        "has_wiki": true,
        "has_pages": false,
        "forks_count": 0,
        "mirror_url": null,
        "open_issues_count": 0,
        "forks": 0,
        "open_issues": 0,
        "watchers": 0,
        "default_branch": "master"
      },
      "sender": {
        "login": "ksripathi",
        "id": 8774380,
        "avatar_url": "https://avatars3.githubusercontent.com/u/8774380?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ksripathi",
        "html_url": "https://github.com/ksripathi",
        "followers_url": "https://api.github.com/users/ksripathi/followers",
        "following_url": "https://api.github.com/users/ksripathi/following{/other_user}",
        "gists_url": "https://api.github.com/users/ksripathi/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ksripathi/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ksripathi/subscriptions",
        "organizations_url": "https://api.github.com/users/ksripathi/orgs",
        "repos_url": "https://api.github.com/users/ksripathi/repos",
        "events_url": "https://api.github.com/users/ksripathi/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ksripathi/received_events",
        "type": "User",
        "site_admin": false
      }
    }

#+END_EXAMPLE
  - Success Response
    + Status_Code: 200
      + Contents :
#+BEGIN_EXAMPLE
{
"status_code" : 200,
"message" : "Successfully deployed repository",
"deploy_details"  : { "lab_id" : "cse01",
                      "lab_src_url" : "http://github.com/vlead/ovpl.git",
                      "version" : "v1.2",
                      "url" : "http://127.0.0.1"
		     }
}
#+END_EXAMPLE    
  - Error Response:
    + Status_code : 401
    + Contents :
      {"status" : "Unauthorized credentials"}
    
  - Example:
#+BEGIN_EXAMPLE
 http://localhost:5000/ci_deploy_repo
#+END_EXAMPLE
*** Implementation   
#+NAME: ci_deploy_repo
#+BEGIN_SRC python
@api.route("/ci_deploy_repo", methods = ['POST', 'GET'])
def deploy_repo():
    if request.method == 'POST':
	try:
	    repo_data = request.get_json()
	    git_url = repo_data['repository']['html_url']
	    current_app.logger.debug("Git repository URL : %s" % (git_url))
	except Exception as e:
	    current_app.logger.error("Exception : %s" % (str(e)))
	    raise str(e)
    else:
	return "Method not allowed"
    git = GitCommands()
    tr = TestRun(git_url)    
    repo_name = git.construct_repo_name(git_url)

    if git.repo_exists(repo_name):
	git.pull_repo(repo_name, GIT_BRANCH)    
    else:
	git.clone_repo(git_url, repo_name)
    git.checkout_version(repo_name, GIT_BRANCH)
    repo_build = RepoBuild(git_url)
    repo_build.repoBuilder()

    tr.createTestEnv()
    if tr.runTestSuit():
	lab_id = repo_name
	lab_url = git_url
	tag = GIT_BRANCH
	if tag == "":
	    tag = "master"
	    data = {'lab_id': lab_id, 'lab_src_url': lab_url, 'version': tag, \
		    'key' : ADS_SECRET_KEY, "current_user" : session.get('current_user')}
	    current_app.logger.debug("Deploy request details = %s" % (data))
	    headers = {'Content-type': 'application/json', 'Accept': 'text/plain'}

	    try:
		r = requests.post(ADS_URL, data=json.dumps(data), headers=headers)
		if r.status_code == 200:
		    if r.text == "Test failed: See log file for errors":
			message = {
			    "lab_id" : lab_id,
			    "lab_src_url" : lab_url,
			    "version" : tag,
			    "Status" : "Error in deploying lab using ADS"
			}

			abort(500, message)
		    else:
			data['url'] = "http://" + r.text
			current_app.logger.debug("Hosted details = %s" % (data))
			return jsonify(data)
		elif r.status_code == 401:
		    current_app.logger.error("error code = %s" % str(r.status_code))
		    abort(401, "Unauthorized request")
		else:
		    abort(500)
	    except Exception as e:
		current_app.logger.error("error code = %s" % str(e))
		raise str(e)

#+END_SRC

*** Test Cases

#+NAME: test_deploy_repo
#+BEGIN_SRC python
class TestDeployRepo(TestCase):
    TESTING = True
    def create_app(self):
	app = create_app(config)
	return app

    def setUp(self):
	pass

    def tearDown(self):
	pass

    def test_ci_deploy_repo(self):
	print "test_ci_deploy_repo"

	headers = {'Content-Type': 'application/json'}
	payload = {
	    "zen": "Responsive is better than fast.",
	    "hook_id": 14493403,
	    "hook": {
		"type": "Repository",
		"id": 14493403,
		"name": "web",
		"active": "true",
		"events": [
		    "push"
		],
		"config": {
		    "content_type": "json",
		    "insecure_ssl": "0",
		    "url": "http://ci.vlabs.ac.in:5000/git"
		},
		"updated_at": "2017-06-21T09:35:07Z",
		"created_at": "2017-06-21T09:35:07Z",
		"url": "https://api.github.com/repos/ksripathi/lab-data-service/hooks/14493403",
		"test_url": "https://api.github.com/repos/ksripathi/lab-data-service/hooks/14493403/test",
		"ping_url": "https://api.github.com/repos/ksripathi/lab-data-service/hooks/14493403/pings",
		"last_response": {
		    "code": "null",
		    "status": "unused",
		    "message": "null"
		}
	    },
	    "repository": {
		"id": 93591178,
		"name": "lab-data-service",
		"full_name": "ksripathi/lab-data-service",
		"owner": {
		    "login": "ksripathi",
		    "id": 8774380,
		    "avatar_url": "https://avatars3.githubusercontent.com/u/8774380?v=3",
		    "gravatar_id": "",
		    "url": "https://api.github.com/users/ksripathi",
		    "html_url": "https://github.com/ksripathi",
		    "followers_url": "https://api.github.com/users/ksripathi/followers",
		    "following_url": "https://api.github.com/users/ksripathi/following{/other_user}",
		    "gists_url": "https://api.github.com/users/ksripathi/gists{/gist_id}",
		    "starred_url": "https://api.github.com/users/ksripathi/starred{/owner}{/repo}",
		    "subscriptions_url": "https://api.github.com/users/ksripathi/subscriptions",
		    "organizations_url": "https://api.github.com/users/ksripathi/orgs",
		    "repos_url": "https://api.github.com/users/ksripathi/repos",
		    "events_url": "https://api.github.com/users/ksripathi/events{/privacy}",
		    "received_events_url": "https://api.github.com/users/ksripathi/received_events",
		    "type": "User",
		    "site_admin": "false"
		},
		"private": "false",
		"html_url": "https://github.com/ksripathi/test-project",
		"description": "null",
		"fork": "true",
		"url": "https://api.github.com/repos/ksripathi/lab-data-service",
		"forks_url": "https://api.github.com/repos/ksripathi/lab-data-service/forks",
		"keys_url": "https://api.github.com/repos/ksripathi/lab-data-service/keys{/key_id}",
		"collaborators_url": "https://api.github.com/repos/ksripathi/lab-data-service/collaborators{/collaborator}",
		"teams_url": "https://api.github.com/repos/ksripathi/lab-data-service/teams",
		"hooks_url": "https://api.github.com/repos/ksripathi/lab-data-service/hooks",
		"issue_events_url": "https://api.github.com/repos/ksripathi/lab-data-service/issues/events{/number}",
		"events_url": "https://api.github.com/repos/ksripathi/lab-data-service/events",
		"assignees_url": "https://api.github.com/repos/ksripathi/lab-data-service/assignees{/user}",
		"branches_url": "https://api.github.com/repos/ksripathi/lab-data-service/branches{/branch}",
		"tags_url": "https://api.github.com/repos/ksripathi/lab-data-service/tags",
		"blobs_url": "https://api.github.com/repos/ksripathi/lab-data-service/git/blobs{/sha}",
		"git_tags_url": "https://api.github.com/repos/ksripathi/lab-data-service/git/tags{/sha}",
		"git_refs_url": "https://api.github.com/repos/ksripathi/lab-data-service/git/refs{/sha}",
		"trees_url": "https://api.github.com/repos/ksripathi/lab-data-service/git/trees{/sha}",
		"statuses_url": "https://api.github.com/repos/ksripathi/lab-data-service/statuses/{sha}",
		"languages_url": "https://api.github.com/repos/ksripathi/lab-data-service/languages",
		"stargazers_url": "https://api.github.com/repos/ksripathi/lab-data-service/stargazers",
		"contributors_url": "https://api.github.com/repos/ksripathi/lab-data-service/contributors",
		"subscribers_url": "https://api.github.com/repos/ksripathi/lab-data-service/subscribers",
		"subscription_url": "https://api.github.com/repos/ksripathi/lab-data-service/subscription",
		"commits_url": "https://api.github.com/repos/ksripathi/lab-data-service/commits{/sha}",
		"git_commits_url": "https://api.github.com/repos/ksripathi/lab-data-service/git/commits{/sha}",
		"comments_url": "https://api.github.com/repos/ksripathi/lab-data-service/comments{/number}",
		"issue_comment_url": "https://api.github.com/repos/ksripathi/lab-data-service/issues/comments{/number}",
		"contents_url": "https://api.github.com/repos/ksripathi/lab-data-service/contents/{+path}",
		"compare_url": "https://api.github.com/repos/ksripathi/lab-data-service/compare/{base}...{head}",
		"merges_url": "https://api.github.com/repos/ksripathi/lab-data-service/merges",
        	"archive_url": "https://api.github.com/repos/ksripathi/lab-data-service/{archive_format}{/ref}",
		"downloads_url": "https://api.github.com/repos/ksripathi/lab-data-service/downloads",
		"issues_url": "https://api.github.com/repos/ksripathi/lab-data-service/issues{/number}",
		"pulls_url": "https://api.github.com/repos/ksripathi/lab-data-service/pulls{/number}",
		"milestones_url": "https://api.github.com/repos/ksripathi/lab-data-service/milestones{/number}",
		"notifications_url": "https://api.github.com/repos/ksripathi/lab-data-service/notifications{?since,all,participating}",
		"labels_url": "https://api.github.com/repos/ksripathi/lab-data-service/labels{/name}",
		"releases_url": "https://api.github.com/repos/ksripathi/lab-data-service/releases{/id}",
		"deployments_url": "https://api.github.com/repos/ksripathi/lab-data-service/deployments",
		"created_at": "2017-06-07T04:04:59Z",
		"updated_at": "2017-06-07T04:05:00Z",
		"pushed_at": "2017-06-08T11:11:07Z",
		"git_url": "git://github.com/ksripathi/lab-data-service.git",
		"ssh_url": "git@github.com:ksripathi/lab-data-service.git",
		"clone_url": "https://github.com/ksripathi/lab-data-service.git",
		"svn_url": "https://github.com/ksripathi/lab-data-service",
		"homepage": "null",
		"size": 8979,
		"stargazers_count": 0,
		"watchers_count": 0,
		"language": "Shell",
		"has_issues": "false",
		"has_projects": "true",
		"has_downloads": "true",
		"has_wiki": "true",
		"has_pages": "false",
		"forks_count": 0,
		"mirror_url": "null",
		"open_issues_count": 0,
		"forks": 0,
		"open_issues": 0,
		"watchers": 0,
		"default_branch": "master"
	    },
	    "sender": {
		"login": "ksripathi",
		"id": 8774380,
		"avatar_url": "https://avatars3.githubusercontent.com/u/8774380?v=3",
		"gravatar_id": "",
		"url": "https://api.github.com/users/ksripathi",
		"html_url": "https://github.com/ksripathi",
		"followers_url": "https://api.github.com/users/ksripathi/followers",
		"following_url": "https://api.github.com/users/ksripathi/following{/other_user}",
		"gists_url": "https://api.github.com/users/ksripathi/gists{/gist_id}",
		"starred_url": "https://api.github.com/users/ksripathi/starred{/owner}{/repo}",
		"subscriptions_url": "https://api.github.com/users/ksripathi/subscriptions",
		"organizations_url": "https://api.github.com/users/ksripathi/orgs",
		"repos_url": "https://api.github.com/users/ksripathi/repos",
		"events_url": "https://api.github.com/users/ksripathi/events{/privacy}",
		"received_events_url": "https://api.github.com/users/ksripathi/received_events",
		"type": "User",
		"site_admin": "false"
	    }
	}


	response = self.client.post("/ci_deploy_repo", data=json.dumps(payload),
				 headers=headers)
	self.assertEqual(response.status_code, 200)

#+END_SRC


* Infra                                                         :boilerplate:
  
** Imports
*** git imports
#+name: imports_for_git
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
from runtime.config.git_config import *
import os
from execute_commands import *
from flask import current_app
from git import Repo
import requests
import json
import datetime
#+end_src

*** execute commands
#+name: imports_for_exec_cmd
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
import subprocess
#from __init__ import *

#+END_SRC
*** api imports 
#+name: imports_for_api
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
import requests
import json
import subprocess
from runtime.config.ads_config import *
from runtime.config.git_config import USERNAME, PASSWORD, IP_ADDRESS, DEST_DIR, GIT_API, GIT_BRANCH
from flask import session, render_template, Blueprint, request, \
     jsonify, abort, current_app, redirect, url_for
from flask import Flask
from runtime.rest.git_commands import *
import yaml
import sys
api = Blueprint('APIs', __name__)
import os

#+end_src


** tests
*** Imports 
#+name: imports_for_tests
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
import unittest
import shutil
from flask_testing import TestCase
from runtime.rest.app import create_app
from runtime.rest.api import *
import datetime
config = {
         'SQLALCHEMY_DATABASE_URI': ''
         }

#+end_src

*** Running tests
#+NAME: run_test_cases
#+BEGIN_SRC python
if __name__ == '__main__':
    unittest.main()

#+END_SRC


* Tangle                                                        :boilerplate:
  
** sources for git module
#+BEGIN_SRC python :tangle git_commands.py :eval no :noweb yes
<<imports_for_git>>
<<git_clone_loc>>
<<construct_repo>>
<<construct_org>>
<<repo_exist>>
<<repo_clone>>
<<repo_pull>>
<<repo_version>>
<<get_repo_version>>
<<create_issue>>
<<get_commit_info>>
#+END_SRC

** source for api layer
#+BEGIN_SRC python :tangle api.py :eval no :noweb yes

<<imports_for_api>>
<<build_repo>>
<<run_test>>
<<push_docs>>
<<ci_build_sources>>
<<ci_push_docs>>
<<ci_deploy_repo>>
#+END_SRC

** source for for execute command
#+BEGIN_SRC python :tangle execute_commands.py :eval no :noweb yes
<<imports_for_exec_cmd>>
<<execute_shell_cmd>>

#+END_SRC


** tests
#+BEGIN_SRC python :tangle test_api.py :eval no :noweb yes
<<imports_for_tests>>
#<<test_clone_repo>>
#<<test_repo_pull>>
#<<test_get_repo_version>>
#<<test_repo_exist>>
#<<test_construct_org>>
#<<test_construct_repo>>
#<<test_git_clone_loc>>
#<<test_execute_shell_cmd>>
#<<test_create_issue>>
#<<test_build_repo>>
#<<test_run_test>>
#<<test_exec_cmd>>
#<<test_push_docs>>
#<<test_create_issue>>
#<<test_extract_repo>>
#<<test_repo_exist>>
#<<test_get_commit_info>>
#<<test_ci_push_docs>>
#<<test_ci_build_sources>>
<<test_ci_deploy_repo>>
<<run_test_cases>>
#+end_src
